// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Zalo_mini.Data;

#nullable disable

namespace Zalo_mini.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250609024350_addnewtable")]
    partial class addnewtable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Zalo_mini.Models.call", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("answered_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("call_type")
                        .IsRequired()
                        .HasColumnType("enum('voice','video')");

                    b.Property<long>("caller_id")
                        .HasColumnType("bigint");

                    b.Property<long>("conversation_id")
                        .HasColumnType("bigint");

                    b.Property<int?>("duration")
                        .HasColumnType("int")
                        .HasComment("Duration in seconds");

                    b.Property<DateTime?>("ended_at")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("started_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('initiated','ringing','answered','ended','missed','declined')")
                        .HasDefaultValueSql("'initiated'");

                    b.HasKey("id");

                    b.HasIndex(new[] { "caller_id" }, "idx_calls_caller");

                    b.HasIndex(new[] { "conversation_id" }, "idx_calls_conversation");

                    b.HasIndex(new[] { "started_at" }, "idx_calls_started");

                    b.ToTable("calls");
                });

            modelBuilder.Entity("Zalo_mini.Models.call_participant", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("call_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("joined_at")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("left_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('invited','joined','left','declined')")
                        .HasDefaultValueSql("'invited'");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "call_id" }, "idx_call_participants_call");

                    b.HasIndex(new[] { "user_id" }, "idx_call_participants_user");

                    b.ToTable("call_participants");
                });

            modelBuilder.Entity("Zalo_mini.Models.chat_group", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("avatar_url")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("created_by")
                        .HasColumnType("bigint");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("group_type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('private','group','channel')")
                        .HasDefaultValueSql("'group'");

                    b.Property<bool?>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("max_members")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'200'");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id");

                    b.HasIndex(new[] { "created_by" }, "idx_groups_creator");

                    b.HasIndex(new[] { "group_type" }, "idx_groups_type");

                    b.ToTable("chat_groups");
                });

            modelBuilder.Entity("Zalo_mini.Models.conversation", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("avatar_url")
                        .HasColumnType("text");

                    b.Property<string>("conversation_type")
                        .IsRequired()
                        .HasColumnType("enum('direct','group')");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("group_id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("last_message_at")
                        .HasColumnType("timestamp");

                    b.Property<long?>("last_message_id")
                        .HasColumnType("bigint");

                    b.Property<string>("name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id");

                    b.HasIndex(new[] { "last_message_id" }, "fk_conversations_last_message");

                    b.HasIndex(new[] { "group_id" }, "idx_conversations_group");

                    b.HasIndex(new[] { "last_message_at" }, "idx_conversations_last_message");

                    b.HasIndex(new[] { "conversation_type" }, "idx_conversations_type");

                    b.ToTable("conversations");
                });

            modelBuilder.Entity("Zalo_mini.Models.conversation_deleted", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ConversationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("converation_deleteds");
                });

            modelBuilder.Entity("Zalo_mini.Models.conversation_participant", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("conversation_id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("is_archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool?>("is_muted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool?>("is_pinned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("joined_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("last_read_at")
                        .HasColumnType("timestamp");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "conversation_id" }, "idx_conversation_participants_conv");

                    b.HasIndex(new[] { "user_id", "is_pinned" }, "idx_conversation_participants_pinned");

                    b.HasIndex(new[] { "user_id" }, "idx_conversation_participants_user");

                    b.HasIndex(new[] { "conversation_id", "user_id" }, "unique_conversation_participant")
                        .IsUnique();

                    b.ToTable("conversation_participants");
                });

            modelBuilder.Entity("Zalo_mini.Models.conversation_tag", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("color")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasDefaultValueSql("'#007bff'")
                        .HasComment("Hex color code");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "user_id" }, "idx_conversation_tags_user");

                    b.HasIndex(new[] { "name", "user_id" }, "unique_user_tag")
                        .IsUnique();

                    b.ToTable("conversation_tags");
                });

            modelBuilder.Entity("Zalo_mini.Models.conversation_tag_assignment", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("conversation_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("tag_id")
                        .HasColumnType("bigint");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "conversation_id" }, "idx_conversation_tag_assignments_conv");

                    b.HasIndex(new[] { "tag_id" }, "idx_conversation_tag_assignments_tag");

                    b.HasIndex(new[] { "user_id" }, "idx_conversation_tag_assignments_user");

                    b.HasIndex(new[] { "conversation_id", "tag_id", "user_id" }, "unique_conversation_tag_assignment")
                        .IsUnique();

                    b.ToTable("conversation_tag_assignments");
                });

            modelBuilder.Entity("Zalo_mini.Models.friendship", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("addressee_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("requester_id")
                        .HasColumnType("bigint");

                    b.Property<string>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('pending','accepted','declined','blocked')")
                        .HasDefaultValueSql("'pending'");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id");

                    b.HasIndex(new[] { "addressee_id" }, "idx_friendships_addressee");

                    b.HasIndex(new[] { "requester_id" }, "idx_friendships_requester");

                    b.HasIndex(new[] { "status" }, "idx_friendships_status");

                    b.HasIndex(new[] { "requester_id", "addressee_id" }, "unique_friendship")
                        .IsUnique();

                    b.ToTable("friendships");
                });

            modelBuilder.Entity("Zalo_mini.Models.group_invitation", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("expires_at")
                        .HasColumnType("timestamp");

                    b.Property<long>("group_id")
                        .HasColumnType("bigint");

                    b.Property<long>("invitee_id")
                        .HasColumnType("bigint");

                    b.Property<long>("inviter_id")
                        .HasColumnType("bigint");

                    b.Property<string>("message")
                        .HasColumnType("text");

                    b.Property<DateTime?>("responded_at")
                        .HasColumnType("timestamp");

                    b.Property<string>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('pending','accepted','declined','expired')")
                        .HasDefaultValueSql("'pending'");

                    b.HasKey("id");

                    b.HasIndex(new[] { "group_id" }, "idx_group_invitations_group");

                    b.HasIndex(new[] { "invitee_id" }, "idx_group_invitations_invitee");

                    b.HasIndex(new[] { "status" }, "idx_group_invitations_status");

                    b.HasIndex(new[] { "inviter_id" }, "inviter_id");

                    b.HasIndex(new[] { "group_id", "invitee_id", "status" }, "unique_group_invitation")
                        .IsUnique();

                    b.ToTable("group_invitations");
                });

            modelBuilder.Entity("Zalo_mini.Models.group_member", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("group_id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("joined_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('owner','admin','member')")
                        .HasDefaultValueSql("'member'");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "group_id" }, "idx_group_members_group");

                    b.HasIndex(new[] { "role" }, "idx_group_members_role");

                    b.HasIndex(new[] { "user_id" }, "idx_group_members_user");

                    b.HasIndex(new[] { "group_id", "user_id" }, "unique_group_member")
                        .IsUnique();

                    b.ToTable("group_members");
                });

            modelBuilder.Entity("Zalo_mini.Models.message", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<long>("conversation_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("duration")
                        .HasColumnType("int")
                        .HasComment("Duration in seconds for audio/video");

                    b.Property<string>("file_name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("file_size")
                        .HasColumnType("bigint");

                    b.Property<bool?>("is_deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool?>("is_pinned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool?>("is_recalled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("media_url")
                        .HasColumnType("text");

                    b.Property<string>("message_type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('text','image','video','audio','file','sticker','location','contact')")
                        .HasDefaultValueSql("'text'");

                    b.Property<long?>("reply_to_message_id")
                        .HasColumnType("bigint");

                    b.Property<long>("sender_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id");

                    b.HasIndex(new[] { "content" }, "idx_messages_content")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "conversation_id" }, "idx_messages_conversation");

                    b.HasIndex(new[] { "created_at" }, "idx_messages_created");

                    b.HasIndex(new[] { "reply_to_message_id" }, "idx_messages_reply");

                    b.HasIndex(new[] { "sender_id" }, "idx_messages_sender");

                    b.HasIndex(new[] { "message_type" }, "idx_messages_type");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Zalo_mini.Models.message_deletion", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("deleted_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("message_id")
                        .HasColumnType("bigint");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "message_id" }, "idx_message_deletions_message");

                    b.HasIndex(new[] { "user_id" }, "idx_message_deletions_user");

                    b.HasIndex(new[] { "message_id", "user_id" }, "unique_message_deletion")
                        .IsUnique();

                    b.ToTable("message_deletions");
                });

            modelBuilder.Entity("Zalo_mini.Models.message_reaction", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("message_id")
                        .HasColumnType("bigint");

                    b.Property<string>("reaction_type")
                        .IsRequired()
                        .HasColumnType("enum('like','love','laugh','sad','angry','wow')");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "message_id" }, "idx_message_reactions_message");

                    b.HasIndex(new[] { "user_id" }, "idx_message_reactions_user");

                    b.HasIndex(new[] { "message_id", "user_id", "reaction_type" }, "unique_message_reaction")
                        .IsUnique();

                    b.ToTable("message_reactions");
                });

            modelBuilder.Entity("Zalo_mini.Models.message_read_status", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("message_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("read_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "message_id" }, "idx_message_read_status_message");

                    b.HasIndex(new[] { "user_id" }, "idx_message_read_status_user");

                    b.HasIndex(new[] { "message_id", "user_id" }, "unique_message_read")
                        .IsUnique();

                    b.ToTable("message_read_status", (string)null);
                });

            modelBuilder.Entity("Zalo_mini.Models.notification", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("data")
                        .HasColumnType("json")
                        .HasComment("Additional data as JSON");

                    b.Property<bool?>("is_read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "type" }, "idx_notifications_type");

                    b.HasIndex(new[] { "user_id", "is_read" }, "idx_notifications_unread");

                    b.HasIndex(new[] { "user_id" }, "idx_notifications_user");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("Zalo_mini.Models.search_history", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("search_query")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("search_type")
                        .IsRequired()
                        .HasColumnType("enum('user','message','conversation')");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "created_at" }, "idx_search_history_created");

                    b.HasIndex(new[] { "search_type" }, "idx_search_history_type");

                    b.HasIndex(new[] { "user_id" }, "idx_search_history_user");

                    b.ToTable("search_history", (string)null);
                });

            modelBuilder.Entity("Zalo_mini.Models.sticker", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("image_url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("keywords")
                        .HasColumnType("text")
                        .HasComment("Comma-separated keywords for search");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("pack_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "keywords" }, "idx_stickers_keywords")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "pack_id" }, "idx_stickers_pack");

                    b.ToTable("stickers");
                });

            modelBuilder.Entity("Zalo_mini.Models.sticker_pack", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool?>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("is_free")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("thumbnail_url")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex(new[] { "is_active" }, "idx_sticker_packs_active");

                    b.HasIndex(new[] { "is_free" }, "idx_sticker_packs_free");

                    b.ToTable("sticker_packs");
                });

            modelBuilder.Entity("Zalo_mini.Models.user", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("avatar_url")
                        .HasColumnType("text");

                    b.Property<string>("bio")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly?>("date_of_birth")
                        .HasColumnType("date");

                    b.Property<string>("display_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("gender")
                        .HasColumnType("enum('male','female','other')");

                    b.Property<bool?>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("is_blocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("last_seen")
                        .HasColumnType("timestamp");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("username")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("id");

                    b.HasIndex(new[] { "is_active" }, "idx_users_active");

                    b.HasIndex(new[] { "phone_number" }, "idx_users_phone")
                        .IsUnique();

                    b.HasIndex(new[] { "username" }, "idx_users_username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Zalo_mini.Models.user_block", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("blocked_id")
                        .HasColumnType("bigint");

                    b.Property<long>("blocker_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id");

                    b.HasIndex(new[] { "blocked_id" }, "idx_user_blocks_blocked");

                    b.HasIndex(new[] { "blocker_id" }, "idx_user_blocks_blocker");

                    b.HasIndex(new[] { "blocker_id", "blocked_id" }, "unique_user_block")
                        .IsUnique();

                    b.ToTable("user_blocks");
                });

            modelBuilder.Entity("Zalo_mini.Models.user_session", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("access_token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("device_id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("device_type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("expires_at")
                        .HasColumnType("timestamp");

                    b.Property<bool?>("is_active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("refresh_token")
                        .HasColumnType("text");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex(new[] { "access_token" }, "idx_sessions_token")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 100 });

                    b.HasIndex(new[] { "user_id" }, "idx_sessions_user");

                    b.ToTable("user_sessions");
                });

            modelBuilder.Entity("Zalo_mini.Models.user_setting", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("last_seen_privacy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('everyone','friends','nobody')")
                        .HasDefaultValueSql("'everyone'");

                    b.Property<bool?>("notifications_enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("profile_photo_privacy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('everyone','friends','nobody')")
                        .HasDefaultValueSql("'everyone'");

                    b.Property<bool?>("show_read_receipts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("sound_enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.Property<bool?>("vibration_enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("id");

                    b.HasIndex(new[] { "user_id" }, "idx_user_settings_user")
                        .IsUnique();

                    b.ToTable("user_settings");
                });

            modelBuilder.Entity("Zalo_mini.Models.call", b =>
                {
                    b.HasOne("Zalo_mini.Models.user", "caller")
                        .WithMany("calls")
                        .HasForeignKey("caller_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("calls_ibfk_2");

                    b.HasOne("Zalo_mini.Models.conversation", "conversation")
                        .WithMany("calls")
                        .HasForeignKey("conversation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("calls_ibfk_1");

                    b.Navigation("caller");

                    b.Navigation("conversation");
                });

            modelBuilder.Entity("Zalo_mini.Models.call_participant", b =>
                {
                    b.HasOne("Zalo_mini.Models.call", "call")
                        .WithMany("call_participants")
                        .HasForeignKey("call_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("call_participants_ibfk_1");

                    b.HasOne("Zalo_mini.Models.user", "user")
                        .WithMany("call_participants")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("call_participants_ibfk_2");

                    b.Navigation("call");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Zalo_mini.Models.chat_group", b =>
                {
                    b.HasOne("Zalo_mini.Models.user", "created_byNavigation")
                        .WithMany("chat_groups")
                        .HasForeignKey("created_by")
                        .HasConstraintName("chat_groups_ibfk_1");

                    b.Navigation("created_byNavigation");
                });

            modelBuilder.Entity("Zalo_mini.Models.conversation", b =>
                {
                    b.HasOne("Zalo_mini.Models.chat_group", "group")
                        .WithMany("conversations")
                        .HasForeignKey("group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("conversations_ibfk_1");

                    b.HasOne("Zalo_mini.Models.message", "last_message")
                        .WithMany("conversations")
                        .HasForeignKey("last_message_id")
                        .HasConstraintName("fk_conversations_last_message");

                    b.Navigation("group");

                    b.Navigation("last_message");
                });

            modelBuilder.Entity("Zalo_mini.Models.conversation_deleted", b =>
                {
                    b.HasOne("Zalo_mini.Models.conversation", "Conversation")
                        .WithMany("conversation_deleted")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("conversation_deleteds_Conversation");

                    b.HasOne("Zalo_mini.Models.user", "User")
                        .WithMany("conversation_deleted")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("conversation_deleteds_User");

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zalo_mini.Models.conversation_participant", b =>
                {
                    b.HasOne("Zalo_mini.Models.conversation", "conversation")
                        .WithMany("conversation_participants")
                        .HasForeignKey("conversation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("conversation_participants_ibfk_1");

                    b.HasOne("Zalo_mini.Models.user", "user")
                        .WithMany("conversation_participants")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("conversation_participants_ibfk_2");

                    b.Navigation("conversation");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Zalo_mini.Models.conversation_tag", b =>
                {
                    b.HasOne("Zalo_mini.Models.user", "user")
                        .WithMany("conversation_tags")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("conversation_tags_ibfk_1");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Zalo_mini.Models.conversation_tag_assignment", b =>
                {
                    b.HasOne("Zalo_mini.Models.conversation", "conversation")
                        .WithMany("conversation_tag_assignments")
                        .HasForeignKey("conversation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("conversation_tag_assignments_ibfk_1");

                    b.HasOne("Zalo_mini.Models.conversation_tag", "tag")
                        .WithMany("conversation_tag_assignments")
                        .HasForeignKey("tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("conversation_tag_assignments_ibfk_2");

                    b.HasOne("Zalo_mini.Models.user", "user")
                        .WithMany("conversation_tag_assignments")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("conversation_tag_assignments_ibfk_3");

                    b.Navigation("conversation");

                    b.Navigation("tag");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Zalo_mini.Models.friendship", b =>
                {
                    b.HasOne("Zalo_mini.Models.user", "addressee")
                        .WithMany("friendshipaddressees")
                        .HasForeignKey("addressee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("friendships_ibfk_2");

                    b.HasOne("Zalo_mini.Models.user", "requester")
                        .WithMany("friendshiprequesters")
                        .HasForeignKey("requester_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("friendships_ibfk_1");

                    b.Navigation("addressee");

                    b.Navigation("requester");
                });

            modelBuilder.Entity("Zalo_mini.Models.group_invitation", b =>
                {
                    b.HasOne("Zalo_mini.Models.chat_group", "group")
                        .WithMany("group_invitations")
                        .HasForeignKey("group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("group_invitations_ibfk_1");

                    b.HasOne("Zalo_mini.Models.user", "invitee")
                        .WithMany("group_invitationinvitees")
                        .HasForeignKey("invitee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("group_invitations_ibfk_3");

                    b.HasOne("Zalo_mini.Models.user", "inviter")
                        .WithMany("group_invitationinviters")
                        .HasForeignKey("inviter_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("group_invitations_ibfk_2");

                    b.Navigation("group");

                    b.Navigation("invitee");

                    b.Navigation("inviter");
                });

            modelBuilder.Entity("Zalo_mini.Models.group_member", b =>
                {
                    b.HasOne("Zalo_mini.Models.chat_group", "group")
                        .WithMany("group_members")
                        .HasForeignKey("group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("group_members_ibfk_1");

                    b.HasOne("Zalo_mini.Models.user", "user")
                        .WithMany("group_members")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("group_members_ibfk_2");

                    b.Navigation("group");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Zalo_mini.Models.message", b =>
                {
                    b.HasOne("Zalo_mini.Models.conversation", "conversation")
                        .WithMany("messages")
                        .HasForeignKey("conversation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messages_ibfk_1");

                    b.HasOne("Zalo_mini.Models.message", "reply_to_message")
                        .WithMany("Inversereply_to_message")
                        .HasForeignKey("reply_to_message_id")
                        .HasConstraintName("messages_ibfk_3");

                    b.HasOne("Zalo_mini.Models.user", "sender")
                        .WithMany("messages")
                        .HasForeignKey("sender_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messages_ibfk_2");

                    b.Navigation("conversation");

                    b.Navigation("reply_to_message");

                    b.Navigation("sender");
                });

            modelBuilder.Entity("Zalo_mini.Models.message_deletion", b =>
                {
                    b.HasOne("Zalo_mini.Models.message", "message")
                        .WithMany("message_deletions")
                        .HasForeignKey("message_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_deletions_ibfk_1");

                    b.HasOne("Zalo_mini.Models.user", "user")
                        .WithMany("message_deletions")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_deletions_ibfk_2");

                    b.Navigation("message");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Zalo_mini.Models.message_reaction", b =>
                {
                    b.HasOne("Zalo_mini.Models.message", "message")
                        .WithMany("message_reactions")
                        .HasForeignKey("message_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_reactions_ibfk_1");

                    b.HasOne("Zalo_mini.Models.user", "user")
                        .WithMany("message_reactions")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_reactions_ibfk_2");

                    b.Navigation("message");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Zalo_mini.Models.message_read_status", b =>
                {
                    b.HasOne("Zalo_mini.Models.message", "message")
                        .WithMany("message_read_statuses")
                        .HasForeignKey("message_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_read_status_ibfk_1");

                    b.HasOne("Zalo_mini.Models.user", "user")
                        .WithMany("message_read_statuses")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_read_status_ibfk_2");

                    b.Navigation("message");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Zalo_mini.Models.notification", b =>
                {
                    b.HasOne("Zalo_mini.Models.user", "user")
                        .WithMany("notifications")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("notifications_ibfk_1");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Zalo_mini.Models.search_history", b =>
                {
                    b.HasOne("Zalo_mini.Models.user", "user")
                        .WithMany("search_histories")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("search_history_ibfk_1");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Zalo_mini.Models.sticker", b =>
                {
                    b.HasOne("Zalo_mini.Models.sticker_pack", "pack")
                        .WithMany("stickers")
                        .HasForeignKey("pack_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stickers_ibfk_1");

                    b.Navigation("pack");
                });

            modelBuilder.Entity("Zalo_mini.Models.user_block", b =>
                {
                    b.HasOne("Zalo_mini.Models.user", "blocked")
                        .WithMany("user_blockblockeds")
                        .HasForeignKey("blocked_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_blocks_ibfk_2");

                    b.HasOne("Zalo_mini.Models.user", "blocker")
                        .WithMany("user_blockblockers")
                        .HasForeignKey("blocker_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_blocks_ibfk_1");

                    b.Navigation("blocked");

                    b.Navigation("blocker");
                });

            modelBuilder.Entity("Zalo_mini.Models.user_session", b =>
                {
                    b.HasOne("Zalo_mini.Models.user", "user")
                        .WithMany("user_sessions")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_sessions_ibfk_1");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Zalo_mini.Models.user_setting", b =>
                {
                    b.HasOne("Zalo_mini.Models.user", "user")
                        .WithOne("user_setting")
                        .HasForeignKey("Zalo_mini.Models.user_setting", "user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_settings_ibfk_1");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Zalo_mini.Models.call", b =>
                {
                    b.Navigation("call_participants");
                });

            modelBuilder.Entity("Zalo_mini.Models.chat_group", b =>
                {
                    b.Navigation("conversations");

                    b.Navigation("group_invitations");

                    b.Navigation("group_members");
                });

            modelBuilder.Entity("Zalo_mini.Models.conversation", b =>
                {
                    b.Navigation("calls");

                    b.Navigation("conversation_deleted");

                    b.Navigation("conversation_participants");

                    b.Navigation("conversation_tag_assignments");

                    b.Navigation("messages");
                });

            modelBuilder.Entity("Zalo_mini.Models.conversation_tag", b =>
                {
                    b.Navigation("conversation_tag_assignments");
                });

            modelBuilder.Entity("Zalo_mini.Models.message", b =>
                {
                    b.Navigation("Inversereply_to_message");

                    b.Navigation("conversations");

                    b.Navigation("message_deletions");

                    b.Navigation("message_reactions");

                    b.Navigation("message_read_statuses");
                });

            modelBuilder.Entity("Zalo_mini.Models.sticker_pack", b =>
                {
                    b.Navigation("stickers");
                });

            modelBuilder.Entity("Zalo_mini.Models.user", b =>
                {
                    b.Navigation("call_participants");

                    b.Navigation("calls");

                    b.Navigation("chat_groups");

                    b.Navigation("conversation_deleted");

                    b.Navigation("conversation_participants");

                    b.Navigation("conversation_tag_assignments");

                    b.Navigation("conversation_tags");

                    b.Navigation("friendshipaddressees");

                    b.Navigation("friendshiprequesters");

                    b.Navigation("group_invitationinvitees");

                    b.Navigation("group_invitationinviters");

                    b.Navigation("group_members");

                    b.Navigation("message_deletions");

                    b.Navigation("message_reactions");

                    b.Navigation("message_read_statuses");

                    b.Navigation("messages");

                    b.Navigation("notifications");

                    b.Navigation("search_histories");

                    b.Navigation("user_blockblockeds");

                    b.Navigation("user_blockblockers");

                    b.Navigation("user_sessions");

                    b.Navigation("user_setting")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
